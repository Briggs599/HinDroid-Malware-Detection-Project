# def get_app_names(directory):
#     """Temporary method to get app names from previously created files
    
#     :param directory : str
#         Filepath to directory containing apps
#     """
#     return [name for name in os.listdir(directory)] 

# #[re.findall('^.*?(?=_)', name) for name in os.listdir(directory)]

# def create_feature_graphs(directory, apps):
#     """method
    
#     :param directory : str
#         Filepath to directory containing apps
        
#     :param apps : list
#         List of app names (strings) within directory
        
#     :param feature : str
#         Feature to parse app data for
#     """
#     global_graph = nx.Graph()
    
#     for app in apps:
#         global_graph.add_nodes_from(app_graph(directory, app))
#         #add edges
#         for new_node in app_graph(directory, app):
#             for existing_node in list(global_graph.nodes):
#                 #check if nodes have same package and if so, add edge
#                 if re.findall('^[/a-zA-z]+;{1}', new_node) == re.findall('^[/a-zA-z]+;{1}', existing_node):
#                     global_graph.add_edge(new_node, existing_node)
#     return global_graph

# def app_graph(directory, app):
    
#     local_graph = nx.Graph()
    
#     with open(directory + "/" + app, "r") as f:
#             codeblocks = json.load(f)

#     for codeblock in codeblocks:
#         for method in codeblock:
#             api_call = method.split("}, ")[-1]
#             package_list = re.findall('^[/a-zA-z]+;{1}', api_call)
#             if len(package_list) > 0:
#                 package = package_list[0].strip(';')
#                 node = app + "/" + package
#                 local_graph.add_node(node)
#                 if len(list(local_graph.nodes)) > 1:
#                     for existing_node in list(local_graph.nodes): #add edge for nodes belonging to same app
#                         local_graph.add_edge(node, existing_node)
#     return list(local_graph.nodes)