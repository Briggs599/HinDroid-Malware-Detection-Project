import numpy as np
import networkx as nx
import random
import scipy as sp
from gensim.models import Word2Vec

ALIAS_NODES = {}
ALIAS_EDGES = {}

def matrix_to_graph(matrix):
    """Creates a new multigraph in networkx from an adjacency matrix given as a SciPy sparse matrix
    
     :param matrix : scipy sparse matrix
         An adjacency matrix representation of a graph
    """
    return nx.from_scipy_sparse_matrix(matrix, parallel_edges=True)

def learn_embeddings(walks):
    """Learn embeddings by optimizing the Skipgram objective using SGD.
    
    :param walks : lst
    List of simulated node2vec walks
    """
    walks = list(map(str, walks))
    model = Word2Vec(walks, size=128, window=10, min_count=0, sg=1, workers=8, iter=1)
    model.wv.save_word2vec_format("graph_embeddings.emb")
    
    return
    
def node2vec_walk(G, walk_length, start_node):
    """Simulate a random walk starting from start node.
    
    :param G : networkx multigraph
         Multigraph created from adjacency matrix representation of network
         
    :param walk_length : int
    
    :param walk_length : node
    """
    global ALIAS_NODES
    global ALIAS_EDGES
    alias_nodes = ALIAS_NODES
    alias_edges = ALIAS_EDGES
    
    walk = [start_node]

    while len(walk) < walk_length:
        #print(walk)
        cur = walk[-1]
        cur_nbrs = sorted(G.neighbors(cur))
        #print(cur_nbrs)
        if len(cur_nbrs) > 0:
            if len(walk) == 1:
                #print(alias_nodes)
                walk.append(cur_nbrs[alias_draw(alias_nodes[cur][0], alias_nodes[cur][1])])
            else:
                prev = walk[-2]
                nex = cur_nbrs[alias_draw(alias_edges[(prev, cur)][0], 
                    alias_edges[(prev, cur)][1])]
                walk.append(nex)
        else:
            break

    return walk

def simulate_walks(G, num_walks, walk_length):
    """Repeatedly simulate random walks from each node.
    """
    walks = []
    nodes = list(G.nodes())
    #print(len(nodes))
    print('Walk iteration:')
    for walk_iter in range(num_walks):
        print(str(walk_iter+1) + '/' + str(num_walks))
        random.shuffle(nodes)
        for node in nodes:
            walks.append(node2vec_walk(G, walk_length=walk_length, start_node=node))

    return walks

def get_alias_edge(G, src, dst):
    """Get the alias edge setup lists for a given edge.
    """
    p = 1
    q = 1

    unnormalized_probs = []
    for dst_nbr in sorted(G.neighbors(dst)):
        if dst_nbr == src:
            unnormalized_probs.append(G[dst][dst_nbr]['weight']/p)
        elif G.has_edge(dst_nbr, src):
            unnormalized_probs.append(G[dst][dst_nbr]['weight'])
        else:
            unnormalized_probs.append(G[dst][dst_nbr]['weight']/q)
    norm_const = sum(unnormalized_probs)
    normalized_probs =  [float(u_prob)/norm_const for u_prob in unnormalized_probs]

    return alias_setup(normalized_probs)

def preprocess_transition_probs(G):
    """Preprocessing of transition probabilities for guiding the random walks.
    """
    global ALIAS_NODES
    global ALIAS_EDGES
    alias_nodes = {}
    
    for node in G.nodes():
        unnormalized_probs = [G[node][nbr]['weight'] for nbr in sorted(G.neighbors(node))]
        norm_const = sum(unnormalized_probs)
        normalized_probs =  [float(u_prob)/norm_const for u_prob in unnormalized_probs]
        alias_nodes[node] = alias_setup(normalized_probs)

    alias_edges = {}
    triads = {}

    for edge in G.edges():
            alias_edges[edge] = get_alias_edge(G, edge[0], edge[1])
            alias_edges[(edge[1], edge[0])] = get_alias_edge(G, edge[1], edge[0])

    ALIAS_NODES = alias_nodes
    ALIAS_EDGES = alias_edges

    return

def alias_setup(probs):
    """Compute utility lists for non-uniform sampling from discrete distributions.
    """
    K = len(probs)
    q = np.zeros(K)
    J = np.zeros(K, dtype=np.int)
    smaller = []
    larger = []
    
    for kk, prob in enumerate(probs):
        q[kk] = K*prob
        if q[kk] < 1.0:
            smaller.append(kk)
        else:
            larger.append(kk)

    while len(smaller) > 0 and len(larger) > 0:
        small = smaller.pop()
        large = larger.pop()

        J[small] = large
        q[large] = q[large] + q[small] - 1.0
        if q[large] < 1.0:
            smaller.append(large)
        else:
            larger.append(large)

    return J, q

def alias_draw(J, q):
    """Draw sample from a non-uniform discrete distribution using alias sampling.
    """
    K = len(J)
    kk = int(np.floor(np.random.rand()*K))
    
    if np.random.rand() < q[kk]:
        return kk
    else:
        return J[kk]
    