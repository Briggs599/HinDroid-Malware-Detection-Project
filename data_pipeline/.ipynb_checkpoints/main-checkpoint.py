import os
import re
import numpy as np
import pandas as pd
import pickle
import json
import random
import threading
import getopt
import sys


with open("config/data_params.json", "r") as read_file:
    params = json.load(read_file)

mal_fp = params["mal_fp"]
benign_fp = params["benign_fp"]
mal_fp_test = params["mal_fp_test_loc"]
benign_fp_test = params["benign_fp_test_loc"]


limiter = params["limiter"] # if set to false the pipeline will process every app in dir, else process a set amount
lim_mal = params["lim_mal"] #limits mal apps parsed
lim_benign = params["lim_benign"] #limits benign apps parsed


#import customs
from data_pipeline.model_file.model import *
from data_pipeline.get_data import *
from data_pipeline.extract_features import *
from data_pipeline.build_features import *
from data_pipeline.dict_builder import *



#for reading command line args for testing
argumentList = sys.argv[1:]
options = "t"
long_options = ["test","Test"]
arguments, values = getopt.getopt(argumentList, options, long_options)
for currentArgument, currentValue in arguments:
    if currentArgument in ("-t", "--test","--Test"):
        print ("--- RUNNING FOR TEST DATA ---")
        limiter = False
        mal_fp = mal_fp_test
        benign_fp = benign_fp_test
        print("Pulling Benign test data from: " + benign_fp_test)
        print("Pulling Malware test data from: " + mal_fp_test)
    else:
        continue
#done reading command line args          
            


print()
print()
print()
print("--- Starting Maleware Detection Pipeline ---")
start = time.time()


#limits app intake
if limiter == False:
    print()
    mal_app_names = [name for name in os.listdir(mal_fp) if os.path.isdir(mal_fp + "/" + name)]
    mal_app_names.remove('.ipynb_checkpoints')
    benign_app_names = [name for name in os.listdir(benign_fp) if os.path.isdir(benign_fp + "/" + name)]
    benign_app_names.remove('.ipynb_checkpoints')
else:
    print("Limiting app intake to " + str(lim_mal + lim_benign) + " apps")
    print()
    mal_app_names = [name for name in os.listdir(mal_fp) if os.path.isdir(mal_fp + "/" + name)]
    random.shuffle(mal_app_names) #randomize the list
    mal_app_names = mal_app_names[:lim_mal]
    
    benign_app_names = [name for name in os.listdir(benign_fp) if os.path.isdir(benign_fp + "/" + name)]
    random.shuffle(benign_app_names) #randomize the list
    benign_app_names = benign_app_names[:lim_benign]
    
########################
s_app = time.time()
confirm_exc = create_app_files(benign_fp, benign_app_names,mal_fp, mal_app_names)
if confirm_exc:
    print("--- All Apps Parsed in " + str(int(time.time() - s_app)) + " Seconds ---")
    print()
    print()
else:
    raise ValueError("ERROR create_app_files failed")

########################
print("--- Starting Dictionary Creation ---")
dst = time.time()


dict_B, dict_P, dict_I, dict_A = fast_dict()

for t,fname in zip([dict_B, dict_P, dict_I, dict_A],["dict_B", "dict_P", "dict_I", "dict_A"]):
    save_json(t,"matrices/"+fname)
                   
print("--- Dictionary Creation Done in " + str(int(time.time() - dst)) + " Seconds ---")

#####################
#BASELINE MODEL DISABLED CURRENTLY

#training_df = benign_df.join(malware_df, how='outer', lsuffix = "_y").T.fillna(0)
#hol = list(np.append(np.zeros(benign_df.shape[1]),np.ones(malware_df.shape[1])))
#training_df["label"] = hol
#print()

#if limiter == False:
    #training_df.to_csv("training_data_full") #save progress
#else:
    #training_df.to_csv("training_data_" +str(lim_mal) + "_" +str(lim_benign)) #save progress
#log_model(training_df)

#print()
#print()
#print("--- Full Run Finished in " +str(int(time.time() - start)) + " seconds ---")