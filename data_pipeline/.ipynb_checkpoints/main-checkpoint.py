import os
import re
import numpy as np
import pandas as pd
import pickle
import json


#ToDO all:
# get pipeline working
# create more stable data extraction
# add comments
# move all magic number and params to data-params.json


mal_fp = "/teams/DSC180A_FA20_A00/a04malware/malware"
benign_fp = "/teams/DSC180A_FA20_A00/a04malware/popular-apps"


limiter = True # if set to false the pipeline will process every app in dir, else process a set amount
lim_mal = 1 #limits mal apps parsed
lim_benign = 1 #limits benign apps parsed


#import customs
from data_pipeline.model_file.model import *
from data_pipeline.get_data import *
from data_pipeline.unpack import *
from data_pipeline.extract_features import *


print("--- Starting Maleware Detection Pipeline ---")
start = time.time()


#limits app intake
if limiter == False:
    print()
    mal_app_names = [name for name in os.listdir(mal_fp) if os.path.isdir(mal_fp + "/" + name)] 
    benign_app_names = [name for name in os.listdir(benign_fp) if os.path.isdir(benign_fp + "/" + name)]
else:
    print("Limiting app intake to " + str(lim_mal + lim_benign) + " apps")
    print()
    mal_app_names = [name for name in os.listdir(mal_fp) if os.path.isdir(mal_fp + "/" + name)][:lim_mal] 
    benign_app_names = [name for name in os.listdir(benign_fp) if os.path.isdir(benign_fp + "/" + name)][:lim_benign]

    
# df for malware apps
s_malware = time.time()
malware_df = create_feature_frame(mal_fp, mal_app_names)
print("--- Malware Dataframe Created in " + str(int(time.time() - s_malware)) + " seconds ---")
print()


# df for benign apps
s_benign = time.time()
benign_df = create_feature_frame(benign_fp, benign_app_names)
print("--- Benign Dataframe Created in " + str(int(time.time() - s_benign)) + " seconds ---")



training_df = benign_df.join(malware_df, how='outer', lsuffix = "_y").T.fillna(0)
hol = list(np.append(np.zeros(benign_df.shape[1]),np.ones(malware_df.shape[1])))
training_df["label"] = hol
print()
if limiter == False:
    training_df.to_csv("training_data_full") #save progress
else:
    training_df.to_csv("training_data_" +str(lim_mal) + "_" +str(lim_benign)) #save progress
log_model(training_df)


print()
print()
print("--- Full Run Finished in " +str(int(time.time() - start)) + " seconds ---")