### Extracts data from smali files

import re
import json
import time
import pandas as pd
from data_pipeline.unpack import *
from data_pipeline.extract_features import *

def create_feature_frame(directory, apps):
    """Builds dataframe out of app features within a directory
       Returned dictionary will have features as rows and app names as columns
    
    :param directory : str
        Filepath to directory containing apps
        
    :param apps : list
        List of app names within directory
    """
    app_frames = []
    
    for app in apps:
        app_time = time.time()
        smali_paths = prep_files(directory + "/" + app) # give prep_files path to app
        app_frame = build_local_frame(smali_paths, app)
        app_frames.append(app_frame)
        print(app + " created in " + str(int(time.time() - app_time)))
    
    directory_frame = pd.DataFrame().join([x for x in app_frames], how='outer').fillna(0)
    
    return directory_frame 

def build_local_frame(smali_paths, name):
    """Builds dataframe for features within an app and returns it
    
    :param smali_paths : list
        List of app's filepaths to parse 
        
    :param name : str
        Name of app
    """
    app_api_dict = build_global_dict(smali_paths, "api") 
    app_method_dict = build_global_dict(smali_paths, "method") 
    
    #transpose so app name is row and features are columns (will join on index)
    api_frame = pd.DataFrame(app_api_dict.values(), columns=[name], index=app_api_dict.keys()).T 
    method_frame = pd.DataFrame(app_method_dict.values(), columns=[name], index=app_method_dict.keys()).T
    
    #transpose again after joining so app name is column again
    return api_frame.join(method_frame, how='outer', lsuffix='_1').T.fillna(0) 
    
    
def build_global_dict(filepath_list, feature, global_dict={}):
    """Builds or augments global dictionary for specified feature from file data and returns it
    
    :param filepath_list : list
        List of filepaths to read
        
    :param feature : str
        Feature to extract (['api', 'method', 'package'])          #no functionality for package yet
        
    :param global_dict: dict, optional
        Global dictionary of feature to build or augment 
        If none given, initialize empty dictionary
    """
    for filepath in filepath_list:
        file = open(filepath, "r")
        data = str(file.read())
        
        if feature == 'api':
            global_dict = build_api_dict(data, global_dict) #would making a copy be more or less efficient?
        elif feature == 'method':
            global_dict = build_invoke_method_dict(data, global_dict)
            
    return global_dict


def save_json(dictionary, filename):
    """Saves python dictionary into json file
    
    :param dictionary : dict
        Dictionary to save
    :param filename : str
        Name to give json file
    """
    with open(filename + ".json", "w") as outfile:
        json.dump(dictionary, outfile)
    return "Dictionary Saved"


def load_json(json_file):
    """Loads json file into python dictionary and returns dictionary
    
    :param json_file : str
        File containing dictionary to load 
    """
    with open(json_file, "r") as file:
        dictionary = json.load(file)
    return dictionary 