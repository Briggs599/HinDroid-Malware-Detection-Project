import re
import json
import os

with open("config/dict_build.json", "r") as read_file:
    params = json.load(read_file)
direc = params["directory"]

def fast_dict(): #very fast WOOOSH
    """Builds dictionaries which can be converted into matricies A,B,P,I
    
        
    :return; four dictionaries corrisponding to matricies A,B,P,I
    """
    direc = "data_extract/"
    global_dict = {}
    package_dict = {}
    invoke_dict = {}
    mat_a_occ = {}
    
    list_of_files = []
    for root, dirs, files in os.walk(direc):
        list_of_files.append(files)
    list_of_files = list(set([item for sublist in list_of_files for item in sublist]))
    print(str(len(list_of_files)) + " Total Files for Dictionary Creation")
        
    for file in list_of_files:
        
        if file not in mat_a_occ:
                        mat_a_occ[file] = [] 
        
        with open(direc + file, "r") as f:
            filez = json.load(f)
            
        #MAT A
        mat_a_occ[file] = list(set([item for sublist in filez for item in sublist]))
        
        print("Parsing " + str(len(filez)) + " Blocks from " + file.rstrip(".json"))    
        for block in filez:
            for meth in block:
                    
                    #build global dict of unique api calls
                if meth not in global_dict:
                    global_dict[meth] = []   
                #only keeps unique apis the cooccur in code block (B)
                global_dict[meth] = list(set(global_dict[meth] + block))
                
                    
                if meth not in package_dict:
                    package_dict[meth] = [] 
                
                if meth not in invoke_dict:
                    invoke_dict[meth] = [] 
            
            
    for out_ke in invoke_dict.keys():
        out_inv = out_ke.split("}, ")[0].split(" ")[0]
        out_pack = out_ke.split(";")[0].split(",")[1]
        
        
        
        for ke in invoke_dict.keys():
            inv = ke.split(";")[0].split(",")[1]
            pack = ke.split(";")
            
            
            if inv == out_inv:
                invoke_dict[out_ke].append(ke)
            if pack == out_pack:
                package_dict[out_ke].append(ke)
                
                
                
    return global_dict, package_dict, invoke_dict, mat_a_occ
                    
                    
                        
                    
                    
            
        