from sklearn import linear_model
from sklearn.metrics import balanced_accuracy_score
from sklearn.metrics import confusion_matrix



def log_model(df_feats,test_name):
    tester = df_feats.loc[test_name]
    df_feats = df_feats.drop(test_name, axis = 0)
    X = df_feats.drop("label",axis = 1).to_numpy().reshape(-1, len(df_feats.columns) -1)
    y = df_feats["label"].to_numpy().reshape(-1, 1)
    model = linear_model.LogisticRegression(class_weight='balanced')
    model.fit(X,y)
    preds = model.predict_proba(X)
    y_pred = []
    for i in preds:
        if i[0] > i[1]:
            y_pred.append(0)
        else:
            y_pred.append(1)


    print("COEFS: " + str(model.coef_))  
    print()

    print("MODEL SCORE: " + str(model.score(X, y.ravel())))

    print("BALANCED ACC SCORE: "+str(balanced_accuracy_score(y,y_pred)))
    print()
    print("CONFUSION MATRIX: ")
    print(confusion_matrix(y, y_pred))
    print()
    print()
    print("Tested Prediction:", end = " ")
    result = model.predict_proba(tester.drop("label").to_numpy().reshape(-1, len(df_feats.columns) -1))
    if result[0][0] > result[0][1]:
        print("Benign")
    else:
        print("Malware")